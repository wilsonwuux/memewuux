{"version":3,"sources":["Components/Header.js","Services/CallApis.js","Components/Start.js","Components/Carrusel.js","Components/TableBstrap.js","Components/Nav.js","Components/CreateMeme.js","Routes/Routes.js","App.js","reportWebVitals.js","index.js"],"names":["HeadersApp","Image","style","height","width","display","borderRadius","src","GetMemes","url","a","fetch","method","GetDataMemes","json","GetAllData","ContainerMeme","useState","DataMemes","setDataMemes","Slice","setSlice","useEffect","MethodGetMemeData","MemeDatosFetch","data","memes","length","Newitems","slice","Container","map","element","index","Card","marginTop","margin","Row","Img","variant","Body","Title","name","Text","id","className","ButtonGroup","aria-label","Button","onClick","alert","ComponentCarusel","Carousel","Item","interval","alt","TableBoots","pagination","paginationFactory","sizePerPageList","text","value","columns","dataField","sort","formatter","cell","row","rowIndex","extraData","bootstrap4","keyField","defaultSorted","order","NavBarComponent","Navbar","bg","textDecoration","color","marginRight","marginLeft","to","Nav","CreateMemesControl","captext","setText","memeIndex","setMemeIndex","capMemes","setCapMemes","showMeme","setShowMeme","showNewMeme","setShowNewMeme","useForm","criteriaMode","register","errors","formState","handleSubmit","Array","box_count","fill","Memes","Col","Header","Form","onSubmit","document","getElementById","reset","MemeSelected","formData","FormData","append","forEach","capt","body","then","res","Group","Label","Control","placeholder","required","onChange","e","ev","inde","Valortexto","target","captur","indice","updateText","render","messages","Object","entries","type","message","download","response","blob","window","URL","createObjectURL","link","createElement","href","setAttribute","appendChild","click","catch","err","console","log","min","max","Math","round","random","Routes","path","exact","component","Carrul","ComponentMeme","BootsTable","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"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","file":"static/js/main.4a6b71b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Image} from 'react-bootstrap'\r\n\r\nconst HeadersApp=()=>{\r\n    return <Image style={{height: '300px', width: '100%', display: 'block',borderRadius:'2%'}} src=\"http://www.semantik.com.mx/wp-content/uploads/2017/02/banner_meme-e1488296585786.jpg\"  />\r\n}\r\n\r\nexport default HeadersApp","\r\n\r\nconst urlBase='https://api.imgflip.com'\r\n\r\nexport const GetMemes =async(url)=>{\r\n    const GetDataMemes = await fetch(`${urlBase}/${url}`,{\r\n        method:'GET'\r\n    })\r\n    const GetAllData=await GetDataMemes.json()\r\n    return GetAllData\r\n}\r\n\r\nexport default { GetMemes\r\n    }\r\n\r\n\r\n\r\n\r\n","import React,{useState,useEffect} from 'react';\r\nimport { Container,Button,ButtonGroup,Row,Card } from 'react-bootstrap';\r\nimport {GetMemes} from '../Services/CallApis'\r\nconst ContainerMeme =()=>{\r\n\r\nconst [DataMemes,setDataMemes]=useState([])\r\nconst [Slice,setSlice]=useState(5)\r\n\r\nuseEffect(()=>{\r\n    MethodGetMemeData()\r\n},[])\r\n\r\nconst MethodGetMemeData = async ()=>{\r\n    const MemeDatosFetch = await GetMemes('get_memes')\r\n    setDataMemes((MemeDatosFetch.data.memes.length >0)?MemeDatosFetch.data.memes:[]\r\n        )\r\n}\r\n\r\nlet items =DataMemes;\r\nlet Newitems = items.slice(0,Slice)\r\n\r\nconst GetDataMemes=({Newitems})=>{\r\n    return <Container >{Newitems.map((element,index)=><Card\r\n    key={element.id} \r\n    style={{ \r\n                marginTop:'0px', \r\n                height:\"14rem\", \r\n                width: '12rem',\r\n                display:'inline-block',\r\n                margin:'4px'}}>\r\n            <Row>\r\n            <Card.Img variant=\"top\" src={element.url} width=\"180\" height=\"100\" />\r\n            <Card.Body>\r\n            <Card.Title  key={index} >{element.name}</Card.Title>\r\n            <Card.Text> Codigo: {element.id} </Card.Text>\r\n            </Card.Body>\r\n            </Row>\r\n            </Card>)}\r\n            </Container>\r\n}\r\n\r\n    return <Container className='align-items-center justify-items-center'>\r\n\r\n                <ButtonGroup aria-label=\"Basic example\">\r\n                    <Button onClick={()=>{(Newitems.length&&(Newitems.length>=5))?setSlice(Slice-5):alert('No hay mas elementos' )}} variant=\"danger\"> Menos </Button>\r\n                    <Button variant=\"dark\"> Elementos </Button>\r\n                    <Button onClick={()=>{(Slice==100)?alert('Todos los datos fueron cargados'):setSlice(Slice+5)}} variant=\"success\"> Mas </Button>\r\n                </ButtonGroup>\r\n                <GetDataMemes Newitems={Newitems}/> \r\n            </Container>\r\n\r\n}\r\n\r\nexport default ContainerMeme","import React,{useEffect,useState} from 'react';\r\nimport {Carousel,Container} from 'react-bootstrap'\r\nimport {GetMemes} from '../Services/CallApis'\r\nconst ComponentCarusel = ()=>{\r\n    const [DataMemes,setDataMemes]=useState([])\r\n\r\n    useEffect(()=>{\r\n        MethodGetMemeData()\r\n\r\n    },[])\r\n\r\n    const MethodGetMemeData = async ()=>{\r\n        const MemeDatosFetch = await GetMemes('get_memes')\r\n        setDataMemes(MemeDatosFetch.data.memes)\r\n        \r\n    }\r\n\r\n        return <Container><Carousel>\r\n        <Carousel.Item interval={1000}>\r\n            <img\r\n            className=\"d-block w-100\"\r\n            src={(DataMemes.length)&&DataMemes[44].url}\r\n            alt=\"First slide\"\r\n            height=\"400\"\r\n            />\r\n\r\n        </Carousel.Item>\r\n        <Carousel.Item interval={1000}>\r\n            <img\r\n            className=\"d-block w-100\"\r\n            src={(DataMemes.length)&&DataMemes[5].url}\r\n            alt=\"First slide\"\r\n            height=\"400\"\r\n            />\r\n\r\n        </Carousel.Item>\r\n        <Carousel.Item interval={1000}>\r\n            <img\r\n            className=\"d-block w-100\"\r\n            src={(DataMemes.length)&&DataMemes[12].url}\r\n            alt=\"First slide\"\r\n            height=\"400\"\r\n            />\r\n\r\n        </Carousel.Item>\r\n        </Carousel>\r\n        </Container>\r\n}\r\n\r\nexport default ComponentCarusel","import React,{useState,useEffect} from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Container} from 'react-bootstrap';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport {GetMemes} from '../Services/CallApis'\r\nconst TableBoots=()=>{\r\n    const [DataMemes,setDataMemes]=useState([])\r\n\r\n    useEffect(()=>{\r\n        MethodGetMemeData()\r\n\r\n    },[])\r\n\r\n    const MethodGetMemeData = async ()=>{\r\n        const MemeDatosFetch = await GetMemes('get_memes')\r\n        setDataMemes(MemeDatosFetch.data.memes)\r\n        \r\n    }\r\n    const pagination = paginationFactory({\r\n        sizePerPageList: [\r\n        {text: '5', value: 5},\r\n        {text: '10', value: 10},\r\n        {text: 'All', value: DataMemes.length}\r\n        ]\r\n        }\r\n    )\r\n\r\n    const columns = [{\r\n    dataField: 'id',\r\n    text: 'ID',\r\n    sort: true\r\n    }, {\r\n    dataField: 'name',\r\n    text: 'Nombre',\r\n    sort: true\r\n    }, {\r\n    dataField: 'url',\r\n    text: 'Meme',\r\n    sort: true,\r\n    formatter: (cell, row, rowIndex, extraData) => (\r\n        <img width={64}\r\n        height={64}\r\n        className=\"mr-3\"\r\n        src={row.url}\r\n        alt=\"Generic placeholder\"/>\r\n    ),\r\n    }];\r\n\r\n    const defaultSorted = [{\r\n    dataField: 'name',\r\n    order: 'desc'\r\n    }];\r\n\r\n    return<Container><BootstrapTable\r\n    bootstrap4\r\n    keyField=\"id\"\r\n    data={ DataMemes }\r\n    columns={ columns }\r\n    pagination={ pagination }\r\n    defaultSorted={ defaultSorted } \r\n    /></Container>\r\n}\r\n\r\nexport default TableBoots","import React from 'react'\r\nimport {Navbar,Nav,Container} from 'react-bootstrap'\r\nimport {Link} from \"react-router-dom\";\r\nconst NavBarComponent=()=>{\r\nreturn <Container>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Link style={{textDecoration:'none',color:'white', marginRight:'8px', marginLeft:'8px'}} to=\"/\" ><h4>HOME</h4></Link>\r\n            <Nav >\r\n                <Link style={{textDecoration:'none',color:'white', marginRight:'8px', marginLeft:'8px'}} to=\"/oldtable\">CARDS Memes </Link>\r\n                <Link style={{textDecoration:'none',color:'white', marginRight:'8px', marginLeft:'8px'}} to=\"/bootstable\">TABLE Memes</Link>\r\n                <Link style={{textDecoration:'none',color:'white', marginRight:'8px', marginLeft:'8px'}} to=\"/newmeme\"> NEW Memes </Link>\r\n            </Nav>\r\n        </Navbar>\r\n    </Container>}\r\n\r\nexport default NavBarComponent","import React, {useState,useEffect} from 'react';\r\nimport { Container,Button,Row,Card ,Form,Col,Image } from 'react-bootstrap';\r\nimport {GetMemes} from '../Services/CallApis'\r\nimport { ErrorMessage } from \"@hookform/error-message\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst CreateMemesControl=()=>{\r\n\r\nconst[captext,setText]=useState([])\r\nconst[memeIndex,setMemeIndex]=useState(0)\r\nconst [DataMemes,setDataMemes]=useState([])\r\nconst [capMemes,setCapMemes]=useState(null)\r\nconst[showMeme,setShowMeme]=useState(true)\r\nconst[showNewMeme,setShowNewMeme]=useState(false),\r\n    {\r\n        register,\r\n        formState: { errors },\r\n        handleSubmit\r\n    } = useForm({\r\n        criteriaMode: \"all\"\r\n    });\r\n\r\n\r\n    useEffect(()=>{\r\n    MethodGetMemeData()\r\n\r\n},[])\r\n\r\nuseEffect(()=>{\r\n    if(DataMemes.length){\r\n    setText(Array(DataMemes[memeIndex].box_count).fill(''))\r\n    }\r\n},[DataMemes,memeIndex])\r\n\r\nconst ramdomIndex =(min, max)=> {\r\n\r\n    setShowMeme(true)\r\n    setShowNewMeme(false)\r\n    return setMemeIndex(Math.round(Math.random() * (max - min)) + min)\r\n}\r\nconst MethodGetMemeData = async ()=>{\r\n    const MemeDatosFetch = await GetMemes('get_memes')\r\n    const Memes=MemeDatosFetch.data.memes.length\r\n    setDataMemes((Memes >0)?MemeDatosFetch.data.memes:[]\r\n        )\r\n}\r\n\r\nconst updateText=(ev,inde)=>{\r\n\r\n    const Valortexto = ev.target.value || '';\r\n    setText(\r\n        captext.map((captur,indice)=>{\r\n        if(inde===indice){\r\n            return Valortexto\r\n        }else{\r\n            return captur\r\n        }\r\n    }))\r\n    \r\n}\r\n\r\n\r\nconst GenerateMemesNew=()=>{\r\n    document.getElementById('create-course-form').reset()\r\n    setShowMeme(false)\r\n    setShowNewMeme(true)\r\n    const MemeSelected=DataMemes[memeIndex]\r\n    const formData= new FormData();\r\n    formData.append('username','WUUXDJPRODUCER') \r\n    formData.append('password','Abc123456')\r\n    formData.append('template_id',MemeSelected.id)\r\n    captext.forEach((capt,index)=>formData.append(`boxes[${index}][text]`,capt))\r\n\r\n    fetch('https://api.imgflip.com/caption_image',{\r\n        method:'POST',\r\n        body:formData\r\n    }).then(res=>{\r\n        res.json().then(res=>{\r\n            setCapMemes(res.data.url)\r\n        })\r\n    })\r\n\r\n}\r\n\r\nconst download = () => {\r\n    fetch(capMemes)\r\n        .then(response => {\r\n            response.blob().then((blob) => {\r\n            const url = window.URL.createObjectURL(blob);\r\n            const link = document.createElement(\"a\");\r\n            link.href = url;\r\n            link.setAttribute(\"download\", \"image.png\"); //or any other extension\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            });\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n\r\n    return<Container>\r\n    <Row>\r\n    <Col>\r\n    <Card>\r\n        <Card.Header>NUEVO MEME</Card.Header>\r\n        <Card.Body>\r\n    <Form onSubmit={handleSubmit(GenerateMemesNew)} id=\"create-course-form\">\r\n        <Form.Group>\r\n        {(captext.length)&&captext.map((element,index)=><Form.Group >\r\n            <Form.Label>Ingrese texto</Form.Label>\r\n            <Form.Control \r\n                name={`form-control-${index}`} \r\n                key={index} \r\n                placeholder='ingresa tu texto' \r\n                {...register(`boxCounts_${index}`, {\r\n                required: \"Este campo esta vacio\",\r\n                })}\r\n                onChange={(e)=>{updateText(e,index)}}  \r\n            />\r\n                <ErrorMessage\r\n                errors={errors}\r\n                name={`boxCounts_${index}`}\r\n                render={({ messages }) => {\r\n                return messages\r\n                    ? Object.entries(messages).map(([type, message]) => (\r\n                        <p className=\"alert alert-danger\" key={type}>{message}</p>\r\n                    ))\r\n                    : null;\r\n                }}\r\n            />\r\n            </Form.Group>)}\r\n        </Form.Group>\r\n        <Form.Group >\r\n        <Form.Text className=\"text-muted\">\r\n            Elige tu MEME favorito y agregale texto personalizado.\r\n        </Form.Text>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" type='submit' >\r\n        Generar\r\n        </Button>\r\n    </Form>\r\n        </Card.Body>\r\n    </Card>\r\n\r\n\r\n    </Col>\r\n    <Col>\r\n    <Card className='align-items-center justify-items-center'>\r\n        <Card.Header>\r\n        {(DataMemes.length)&&DataMemes[memeIndex].name}\r\n\r\n        </Card.Header>\r\n        <Card.Title  ><Container className='align-items-center justify-items-center'>\r\n                {(capMemes!=null)?<a className='btn btn-success'\r\n            download\r\n            onClick={() => download()}\r\n        >\r\n            <i className=\"fa fa-download\" />\r\n            download\r\n        </a>:''}\r\n                    <Button onClick={()=>ramdomIndex(0,100)} variant=\"danger\"> CARGAR NUEVO MEME </Button>\r\n\r\n        </Container>\r\n        </Card.Title>\r\n        <Card.Body>\r\n            {showMeme&&<Image src={(DataMemes.length)&&DataMemes[memeIndex].url}\r\n            width=\"350\" height=\"300\" />}\r\n\r\n            {showNewMeme&&<Image src={capMemes}\r\n            width=\"350\" height=\"300\" />}\r\n        </Card.Body>\r\n    </Card>\r\n    </Col>\r\n    \r\n    </Row>\r\n</Container>\r\n}\r\n\r\nexport default CreateMemesControl\r\n","import React from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport ComponentMeme from '../Components/Start'\r\nimport Carrul from '../Components/Carrusel'\r\nimport BootsTable from '../Components/TableBstrap'\r\nimport NavBarComponent from '../Components/Nav'\r\nimport CreateMemesControl from '../Components/CreateMeme'\r\nconst Routes = () =>\r\n{\r\n    return(\r\n        <Router>\r\n            <NavBarComponent/>\r\n            <br/>\r\n                <Switch>\r\n                    <Route path=\"/memewuux/\" exact component={Carrul}/>\r\n                    <Route path=\"/memewuux/oldtable\" component={ComponentMeme}/>\r\n                    <Route path=\"/memewuux/bootstable\" component={BootsTable}/>\r\n                    <Route path=\"/memewuux/newmeme\" component={CreateMemesControl}/>\r\n                </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport {Container,Col,Row} from 'react-bootstrap'\nimport Header from './Components/Header'\nimport Routes from './Routes/Routes'\nconst App= ()=> {\n  return (\n    <div className=\"App\">\n      <Row>\n      <Col>\n          <Container>\n            <Header/>\n          </Container>\n      </Col>\n      </Row>\n      <Row>\n        <Col></Col>\n          <Col>\n            <h1 className='text-center'>App Memes</h1>\n          </Col>\n        <Col></Col>\n      </Row>\n      <Row>\n      <Col>\n        <Routes />\n      </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Container} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nReactDOM.render(\n  <Container>\n    <App />\n  </Container>\n    \n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}